# -*- coding: utf-8 -*-
"""conway.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWBcDL6ofuGtFDqyZcZ-BcFS9TprFiH0
"""

import numpy as np
import matplotlib.pyplot as plt
import configparser
import sys

#primera clase
class Celda:
    def __init__(self, estado=False):
        """Inicializa la celda con estado muerto (False) por defecto o vivo (True)"""
        self.estado = estado

    def interactuar(self, vecinos):
        """Determina el próximo estado de la celda basado en los estados de las celdas vecinas."""
        vivos_alrededor = sum(celda.estado for celda in vecinos)
        #Suma en comprension: itera sobre cada celda en la lista de vecinos accediendo a celda.estado que es booleano y suma 1 por cada True y 0 por cada False

#lo mismo que:
#vivos_alrededor = 0
#for celda in vecinos:
#    if celda.estado:
#       vivos_alrededor += 1

        if self.estado == True:
            # Regla para celdas vivas
            if vivos_alrededor < 2 or vivos_alrededor > 3:
                return False  # Muere
            else:
                return True  # Sigue viva
        else:
            # Regla para celdas muertas
            if vivos_alrededor == 3:
                return True  # Revive
            return False  # Sigue muerta

#segunda clase
class Grilla:
    def __init__(self, tamaño, vivas_iniciales, archivo_salida="resultado.png"):
        """Inicializa la grilla de NxN celdas."""
        self.tamaño = tamaño
        self.archivo_salida = archivo_salida
        self.contador = 0
        # Crear las matrices de celdas
        self.celdas = [[Celda() for _ in range(tamaño)] for _ in range(tamaño)]
        #crea una fila de N celdas y se repite este proceso N veces, formando una matriz
        self.celdas_siguiente = [[Celda() for _ in range(tamaño)] for _ in range(tamaño)]
        # Establecer celdas vivas iniciales (volviendolas True)
        for x, y in vivas_iniciales:
            self.celdas[x][y].estado = True

    def actualizar_celdas(self):
        """Actualiza la grilla copiando el estado de `celdas_siguiente` en `celdas`."""
        for i in range(self.tamaño):
            for j in range(self.tamaño):
                self.celdas[i][j].estado = self.celdas_siguiente[i][j].estado

    def visualizar(self):
        """Genera y exporta un gráfico de la grilla actual."""
        matriz = np.array([[1 if celda.estado else 0 for celda in fila] for fila in self.celdas])
#la linea de arriba convierte el estado de cada celda de la grilla en una matriz numpy de 1s(vivas) y 0s(muertas)
        plt.imshow(matriz, cmap="binary")
#la linea de arriba es para visualizar la matriz numpy de arriba
#binary es para tener escala de color en blanco y negro
        plt.title(f"Generación {self.contador}")
        plt.axis("off")
        plt.savefig(f"{self.archivo_salida}_{self.contador}.png")
        plt.close()

    def obtener_vecinos(self, x, y):
        """Obtiene las celdas vecinas de la celda en posición (x, y)."""
        vecinos = []
        for i in range(max(0, x - 1), min(self.tamaño, x + 2)):
            for j in range(max(0, y - 1), min(self.tamaño, y + 2)):
                if (i, j) != (x, y):  # Evitar la celda actual
                    vecinos.append(self.celdas[i][j])
        return vecinos

    def avanzar(self):
        """Calcula la siguiente generación de la grilla."""
        for i in range(self.tamaño):
            for j in range(self.tamaño):
                vecinos = self.obtener_vecinos(i, j)
                # Determina el próximo estado en `celdas_siguiente`
                self.celdas_siguiente[i][j].estado = self.celdas[i][j].interactuar(vecinos)
        # Actualizar las celdas y el contador
        self.actualizar_celdas()
        self.contador += 1
        self.visualizar()

def cargar_datos(archivo):
    """Carga los datos desde el archivo INI y retorna el tamaño de la grilla y las posiciones iniciales vivas."""
    with open(archivo, "r") as f:
        lineas = f.readlines()#lee las lineas del archivo y crea una lista
    tamaño = int(lineas[0].strip())#elimina salto de linea y el numero de lineas(en la linea 0) se convierte en entero
    vivas_iniciales = [tuple(map(int, linea.strip().split(','))) for linea in lineas[1:]]
    #las siguientes lineas les quita el /n, separa los numeros de las cordenadas delimitandolo con la ",", lo vuelve entero y enrtega una tupla
    return tamaño, vivas_iniciales

def main():
    if len(sys.argv) != 2:
        print("Uso: python conway.py <archivo_datos.ini>")
        return

    archivo_datos = sys.argv[1]
    tamaño, vivas_iniciales = cargar_datos(archivo_datos)

    # Crear la grilla con los datos del archivo y archivo de salida
    grilla = Grilla(tamaño, vivas_iniciales, archivo_salida="resultado")

    # Ejecutar y visualizar las primeras 10 generaciones
    for _ in range(10):  # Número de generaciones
        grilla.avanzar()